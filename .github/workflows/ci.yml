name: CI/CD Pipeline - Trending App

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

env:
  REGISTRY: docker.io
  BACKEND_IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/trending-backend
  FRONTEND_IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/trending-frontend
  POSTGRES_IMAGE_NAME: postgres:15-alpine
  ELASTICSEARCH_IMAGE_NAME: docker.elastic.co/elasticsearch/elasticsearch:8.11.1

jobs:
  # =============================================================================
  # GIAI ĐOẠN 1: CHUẨN BỊ (Trigger & Environment Setup)
  # =============================================================================
  setup:
    name: 🚀 Setup Environment
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Generate version tag
        id: version
        run: |
          VERSION="v$(date +'%Y%m%d')-${GITHUB_SHA::8}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Generated version: $VERSION"

  # =============================================================================
  # GIAI ĐOẠN 2: KIỂM ĐỊNH (Testing - Unit/Integration)
  # =============================================================================
  test-frontend:
    name: 🧪 Frontend Testing
    runs-on: ubuntu-latest
    needs: setup

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: "./frontend/package-lock.json"

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci --silent

      - name: Run Frontend Tests
        working-directory: ./frontend
        run: |
          npm test -- --coverage --watchAll=false

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./frontend/coverage/coverage-final.json
          flags: frontend
          fail_ci_if_error: false

  # =============================================================================
  # GIAI ĐOẠN 3: XÂY DỰNG IMAGE (Docker Build)
  # =============================================================================
  build-backend:
    name: 🏗️ Build Backend Image
    runs-on: ubuntu-latest
    needs: [setup] # ĐÃ BỎ test-backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Backend Image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          tags: |
            ${{ env.BACKEND_IMAGE_NAME }}:${{ needs.setup.outputs.version }}
            ${{ env.BACKEND_IMAGE_NAME }}:latest
          outputs: type=docker,dest=/tmp/backend-image.tar
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Upload Backend Image artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-image
          path: /tmp/backend-image.tar
          retention-days: 1

  build-frontend:
    name: 🏗️ Build Frontend Image
    runs-on: ubuntu-latest
    needs: [setup, test-frontend]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Frontend Image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          target: dev
          tags: |
            ${{ env.FRONTEND_IMAGE_NAME }}:${{ needs.setup.outputs.version }}
            ${{ env.FRONTEND_IMAGE_NAME }}:latest
          outputs: type=docker,dest=/tmp/frontend-image.tar
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Upload Frontend Image artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-image
          path: /tmp/frontend-image.tar
          retention-days: 1

  # =============================================================================
  # GIAI ĐOẠN 4: ĐẢM BẢO CHẤT LƯỢNG (Security Scan)
  # =============================================================================
  security-scan-backend:
    name: 🔒 Security Scan - Backend
    runs-on: ubuntu-latest
    needs: build-backend

    steps:
      - name: Download Backend Image
        uses: actions/download-artifact@v4
        with:
          name: backend-image
          path: /tmp

      - name: Load Docker Image
        run: docker load --input /tmp/backend-image.tar

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.BACKEND_IMAGE_NAME }}:latest
          format: "sarif"
          output: "trivy-backend-results.sarif"
          severity: "CRITICAL,HIGH"
          exit-code: "0"

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-backend-results.sarif"
          category: "backend-image"

      - name: Run Trivy vulnerability scanner (Table output)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.BACKEND_IMAGE_NAME }}:latest
          format: "table"
          severity: "CRITICAL,HIGH"

  security-scan-frontend:
    name: 🔒 Security Scan - Frontend
    runs-on: ubuntu-latest
    needs: build-frontend

    steps:
      - name: Download Frontend Image
        uses: actions/download-artifact@v4
        with:
          name: frontend-image
          path: /tmp

      - name: Load Docker Image
        run: docker load --input /tmp/frontend-image.tar

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.FRONTEND_IMAGE_NAME }}:latest
          format: "sarif"
          output: "trivy-frontend-results.sarif"
          severity: "CRITICAL,HIGH"
          exit-code: "0"

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-frontend-results.sarif"
          category: "frontend-image"

      - name: Run Trivy vulnerability scanner (Table output)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.FRONTEND_IMAGE_NAME }}:latest
          format: "table"
          severity: "CRITICAL,HIGH"

  # =============================================================================
  # GIAI ĐOẠN 5: ĐĂNG KÝ (Tagging & Pushing to Registry)
  # =============================================================================
  push-images:
    name: 📦 Push Images to Registry
    runs-on: ubuntu-latest
    needs: [setup, security-scan-backend, security-scan-frontend]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Download Backend Image
        uses: actions/download-artifact@v4
        with:
          name: backend-image
          path: /tmp

      - name: Download Frontend Image
        uses: actions/download-artifact@v4
        with:
          name: frontend-image
          path: /tmp

      - name: Load Docker Images
        run: |
          docker load --input /tmp/backend-image.tar
          docker load --input /tmp/frontend-image.tar

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push Backend Image
        run: |
          docker push ${{ env.BACKEND_IMAGE_NAME }}:${{ needs.setup.outputs.version }}
          docker push ${{ env.BACKEND_IMAGE_NAME }}:latest

      - name: Push Frontend Image
        run: |
          docker push ${{ env.FRONTEND_IMAGE_NAME }}:${{ needs.setup.outputs.version }}
          docker push ${{ env.FRONTEND_IMAGE_NAME }}:latest

      - name: Create Release Summary
        run: |
          echo "## 🎉 Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Images Published:" >> $GITHUB_STEP_SUMMARY
          echo "- **Backend**: \`${{ env.BACKEND_IMAGE_NAME }}:${{ needs.setup.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Frontend**: \`${{ env.FRONTEND_IMAGE_NAME }}:${{ needs.setup.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Pull Commands:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.BACKEND_IMAGE_NAME }}:${{ needs.setup.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.FRONTEND_IMAGE_NAME }}:${{ needs.setup.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
