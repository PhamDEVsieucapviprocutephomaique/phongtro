name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  test-backend:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: trending_db
          POSTGRES_USER: user
          POSTGRES_PASSWORD: 28092004
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:8.11.1
        env:
          discovery.type: single-node
          xpack.security.enabled: false
          xpack.security.enrollment.enabled: false
          ES_JAVA_OPTS: -Xms512m -Xmx512m
        options: >-
          --health-cmd "curl http://localhost:9200/_cluster/health"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 9200:9200

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # ðŸ‘ˆ CHá»ˆ GIá»® Láº I DÃ’NG NÃ€Y

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        working-directory: ./backend
        run: |
          pip install -r requirements.txt
          pip install pytest

      - name: Run backend tests
        working-directory: ./backend
        run: python -m pytest -v # ðŸ‘ˆ Bá»Ž "tests/" Ä‘á»ƒ pytest tá»± tÃ¬m

  test-frontend:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # ðŸ‘ˆ CHá»ˆ GIá»® Láº I DÃ’NG NÃ€Y

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install dependencies
        working-directory: ./frontend
        run: npm install

      - name: Run frontend tests
        working-directory: ./frontend
        run: npm test -- --watchAll=false

  build-containers:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # ðŸ‘ˆ CHá»ˆ GIá»® Láº I DÃ’NG NÃ€Y

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build backend image
        run: |
          docker build -t trending-backend:ci ./backend

      - name: Build frontend image
        run: |
          docker build -t trending-frontend:ci ./frontend

      - name: Test docker-compose
        run: |
          docker-compose -f docker-compose.yml build
