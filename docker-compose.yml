services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: trending_postgres
    environment:
      POSTGRES_DB: trending_db
      POSTGRES_USER: user
      POSTGRES_PASSWORD: 28092004
    ports:
      - "7001:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d trending_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.1
    container_name: trending_elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - app-network
    healthcheck:
      test:
        ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: trending_backend
    environment:
      - DATABASE_URL=postgresql://user:28092004@postgres:5432/trending_db
      - ASYNC_DATABASE_URL=postgresql+asyncpg://user:28092004@postgres:5432/trending_db
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    networks:
      - app-network
    volumes:
      - ./backend:/app
    restart: unless-stopped

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: dev
    container_name: trending_frontend
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://host.docker.internal:8000
    depends_on:
      - backend
    networks:
      - app-network
    volumes:
      - ./frontend:/app
      - /app/node_modules
    restart: unless-stopped

volumes:
  postgres_data:
  elasticsearch_data:

networks:
  app-network:
    driver: bridge
